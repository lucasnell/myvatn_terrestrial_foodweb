% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aaa-class.R
\docType{class}
\name{web}
\alias{web}
\title{Foodweb class that implements either of the two versions of the model (A and B).}
\format{An \code{\link{R6Class}} generator object}
\usage{
\preformatted{w <- web$new(...)

w$eq_solve(solve_pars = c("mP", "mD", "aNP", "aDV", "aPH", "aR"),
           initial_vals = rep(0.1, 6))
w$values()
w$ode_solve(tmax, tstep = 1)
print(w)
}
}
\arguments{
\item{solve_pars}{A character vector of length 6 of the parameters that need to be
solved for. Defaults to \code{c("mP", "mD", "aNP", "aDV", "aPH", "aR")}.}

\item{initial_vals}{Numeric vector of length 6 representing the initial guesses of
the unknown parameters. For more info, see \code{\link[rootSolve]{multiroot}}.}

\item{tmax}{Duration over which to run the model.}

\item{tstep}{Step size in units of time. Defaults to \code{1}.}
}
\description{
Upon creating a \code{web} object, it solves for selected unknown parameters, given
the 'known' parameters and equilibria.
It also includes an internal class function \code{ode_solve} that solves the ODEs.
}
\section{Slots}{

\describe{
\item{\code{Neq}}{Desired equilibrium value for N. Initially set to \code{34300}.}

\item{\code{Deq}}{Desired equilibrium value for D. Initially set to \code{308700}.}

\item{\code{Peq}}{Desired equilibrium value for P. Initially set to \code{4300}.}

\item{\code{Veq}}{Desired equilibrium value for V. Initially set to \code{81}.}

\item{\code{Heq}}{Desired equilibrium value for H. Initially set to \code{24}.}

\item{\code{Req}}{Desired equilibrium value for R. Initially set to \code{13}.}

\item{\code{Meq}}{Desired equilibrium value for M. Initially set to \code{0}.}

\item{\code{N0}}{Initial state for N. Initially set to \code{NULL}.}

\item{\code{D0}}{Initial state for D. Initially set to \code{NULL}.}

\item{\code{P0}}{Initial state for P. Initially set to \code{NULL}.}

\item{\code{V0}}{Initial state for V. Initially set to \code{NULL}.}

\item{\code{H0}}{Initial state for H. Initially set to \code{NULL}.}

\item{\code{R0}}{Initial state for R. Initially set to \code{NULL}.}

\item{\code{M0}}{Initial state for M. Initially set to \code{NULL}.}

\item{\code{iN}}{Input to N. Initially set to \code{1000}.}

\item{\code{lD}}{Loss rates systems for D. Initially set to \code{0.1}.}

\item{\code{lP}}{Loss rates systems for P. Initially set to \code{0.1}.}

\item{\code{lV}}{Loss rates systems for V. Initially set to \code{0.1}.}

\item{\code{lH}}{Loss rates systems for H. Initially set to \code{0.1}.}

\item{\code{lR}}{Loss rates systems for R. Initially set to \code{0.1}.}

\item{\code{lM}}{Loss rates systems for M. Initially set to \code{0.1}.}

\item{\code{mN}}{Loss rates from pool N (returned to either N or D).
Initially set to \code{0.002}.}

\item{\code{mP}}{Loss rates from pool P (returned to either N or D).
Initially set to \code{NA}.}

\item{\code{mD}}{Loss rates from pool D (returned to either N or D).
Initially set to \code{NA}.}

\item{\code{mV}}{Loss rates from pool V (returned to either N or D).
Initially set to \code{0.1}.}

\item{\code{mH}}{Loss rates from pool H (returned to either N or D).
Initially set to \code{0.1}.}

\item{\code{mR}}{Loss rates from pool R (returned to either N or D).
Initially set to \code{0.1}.}

\item{\code{mM}}{Loss rates from pool M (returned to either N or D).
Initially set to \code{0.5}.}

\item{\code{kP}}{Carrying capacity for P. Initially set to \code{8000}.}

\item{\code{kV}}{Carrying capacity for V. Initially set to \code{162}.}

\item{\code{kH}}{Carrying capacity for H. Initially set to \code{48}.}

\item{\code{kR}}{Carrying capacity for R. Only used for model A. Initially set to \code{26}.}

\item{\code{hP}}{Handing time for P. Initially set to \code{1}.}

\item{\code{hD}}{Handing time for D. Initially set to \code{1}.}

\item{\code{hR}}{Handing time for R. Only for model B. Initially set to \code{1}.}

\item{\code{aNP}}{Uptake rate for NP. Initially set to \code{NA}.}

\item{\code{aDV}}{Uptake rate for DV. Initially set to \code{NA}.}

\item{\code{aPH}}{Uptake rate for PH. Initially set to \code{NA}.}

\item{\code{aR}}{Uptake rate for R. Initially set to \code{NA}.}

\item{\code{iM_func}}{Midge function. The function is wrapped inside a list to allow it to
be changed. Initially set to \code{list(function(t) 0)}.}

\item{\code{model}}{Which model to use ("A" or "B"). Initially set to \code{"A"}.}
}}

\section{Methods}{


\describe{
    \item{\code{$values()}}{
        Return a list of all parameter values.
    }
    \item{\code{$eq_solve(solve_pars, initial_vals)}}{
        Use estimated equilibrium biomass and selected values for certain
        parameters to solve for unknown values. "Known" parameters must be selected
        with care, to ensure that an equilibrium solution can actually be reached.
    }
    \item{\code{$ode_solve(tmax, tstep)}}{
        Solve the ODE and output timeseries of nitrogen content for each pool.
    }
}
}

\section{Slots}{

}

\examples{
library(tidyverse)

# Initialize model (A is default)
foodweb_A = web$new(model="A")

# Solve for unknown values
foodweb_A$eq_solve()

# Viewing class:
foodweb_A

# Outputting class values:
foodweb_A$values()

# Create function for time-varying midge pulse (make sure to wrap it in a list)
# pulse is the instantaneous rate of midge input over the specified time frame
# pulse_tmin and pulse_tmax define the duration over which the midge pulse occurs
foodweb_A$iM_func = list(
    function(t) {
        pulse=500; pulse_tmin=100; pulse_tmax=150
        ifelse(t > pulse_tmin & t < pulse_tmax, pulse, 0)
    }
)


# Solve ODEs
output_A = foodweb_A$ode_solve(tmax = 1000)  \%>\%
    gather('pool', 'biomass', -time)

# Plot absolute biomass
output_A  \%>\%
    group_by(pool) \%>\%
    # Define 'minb' to set the minimum value for the y-axis.
    # This allows different y-scales for different facets, with the ymin set to 0
    mutate(minb = 0) \%>\%
    ggplot(aes(time, biomass)) +
    facet_wrap(~pool, scales="free_y") +
    # The horizontal lines show the initial states
    geom_hline(data = foodweb_A$initial_states,
               aes(yintercept=biomass), color="firebrick") +
    geom_line(size = 1) +
    geom_point(aes(time, minb), shape="") +
    theme_classic()

# Relative to Equilibrium
# Note that this gives weird results when there is no deviation from equilibrium
# This is probably due to small numerical errors, but is not a big issue
output_A \%>\%
    filter(pool!="M") \%>\%
    group_by(pool) \%>\%
    # Scale the biomass relative to the initial state
    mutate(biomass_scale = biomass/biomass[1]) \%>\%
    ggplot(aes(time, biomass_scale)) +
    facet_wrap(~pool) +
    geom_hline(yintercept = 1, color="firebrick4") +
    geom_line(size = 1) +
    theme_classic()





}
\keyword{data}
